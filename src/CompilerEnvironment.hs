{-

Copyright (C) 2018 Leonardo Banderali

License:

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

-}

module CompilerEnvironment where

import Control.Monad.Writer
import Control.Monad.Except
import Data.List
import Data.Functor.Identity
import System.IO
import Control.Monad.IO.Class as MCIO


-- monad for managing compiler log and errors
type CompilerLogMonadT m = WriterT [String] m
type CompilerMonadT a m = ExceptT String (CompilerLogMonadT m) a
type CompilerMonad a = CompilerMonadT a Identity
type CompilerIOMonad a = CompilerMonadT a IO

-- unwrap compiler monad
runCompiler :: CompilerMonad a -> (Either String a, [String])
runCompiler = runWriter . runExceptT
runCompilerT :: Monad m => CompilerMonadT a m -> m (Either String a, [String])
runCompilerT = runWriterT . runExceptT

-- lift IO to CompilerIOMonad
liftIO :: IO a -> CompilerIOMonad a
liftIO = MCIO.liftIO

-- wrap up compiler monad
compiler :: Monad m => (Either String a, [String]) -> CompilerMonadT a m
compiler c = ExceptT (writer c)

-- convert output generated by the compiler to a string
showCompilerOutput :: Show a => CompilerMonad a -> Either String String
showCompilerOutput c = case runCompiler c of
        (Right ts, l) -> Right . show $ ts
        (Left e, l)   -> Left e

-- unwarp the compiler log and convert it to a string
showCompilerLog :: CompilerMonad a -> String
showCompilerLog c = case runCompiler c of (_, l) -> concat l

-- generate a compilation error and log it
logMsg :: Monad m => String -> CompilerMonadT () m
logMsg s = writer ((), [s])

logMsgLn :: Monad m => String -> CompilerMonadT () m
logMsgLn s = logMsg (s ++ "\n")

-- generate a compilation error with the given message
logError :: Monad m => String -> CompilerMonadT a m
logError s = do
    logMsgLn s
    throwError s

-- generate a compilation error with the given message
compError :: Monad m => String -> CompilerMonadT a m
compError = throwError

-- catch a compilation error
catchCompError :: Monad m => CompilerMonadT a m -> (String -> CompilerMonadT a m) -> CompilerMonadT a m
catchCompError = catchError

errorOnNothing :: Monad m => String -> CompilerMonadT (Maybe a) m -> CompilerMonadT a m
errorOnNothing msg c = do
    a <- c
    case a of
        Just a' -> return a'
        Nothing -> compError msg

-- show location in source where compilation error occurred
showCodeAtL :: String -> String -> Int -> Int -> String
showCodeAtL lead source line column = concat
    [ lead, "| ", (lines source) !! (line - 1), "\n"    -- show the source line of code
    , lead, "  ", take (column - 1) $ repeat ' ', "^"   -- show cursor pointing to the error
    ]

showCodeAtI :: Int -> String -> Int -> Int -> String
showCodeAtI indent = showCodeAtL (take indent $ repeat ' ')

showCodeAt :: String -> Int -> Int -> String
showCodeAt = showCodeAtL ""
