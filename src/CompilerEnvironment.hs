module CompilerEnvironment where

import Control.Monad.Writer
import Control.Monad.Except
--import Control.Monad

-- data type representing the compiler state
data CompilerEnvironment = CompilerEnvironment
    { csSource      :: String   -- the actual source code being compiled
    , csSourceFile  :: String   -- path to the file containing the source code (empty if using stdin)
    }

-- monad for managing compiler log and errors
type CompilerMonad a = ExceptT String (Writer [String]) a
type CompilerMonadT m a = ExceptT String (WriterT [String] m) a

-- unwrap compiler monad
runCompiler :: CompilerMonad a -> (Either String a, [String])
runCompiler = runWriter . runExceptT

-- convert output generated by the compiler to a string
showCompilerOutput :: (Show a) => CompilerMonad a -> String
showCompilerOutput s = case runCompiler s of
        (Right ts, l) -> show ts
        (Left e, l)   -> e

-- add the given message to the compilation log
logMsg :: String -> CompilerMonad ()
logMsg s = writer ((), [s])

-- generate a compilation error with the given message
compError :: String -> CompilerMonad a
compError s = do
    logMsg s
    throwError s
