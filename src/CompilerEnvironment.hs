{-

Copyright (C) 2018 Leonardo Banderali

License:

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

-}

module CompilerEnvironment where

import Control.Monad.Writer
import Control.Monad.Except
import Data.List

-- data type representing the compiler state
data CompilerEnvironment = CompilerEnvironment
    { csSource      :: String   -- the actual source code being compiled
    , csSourceFile  :: String   -- path to the file containing the source code (empty if using stdin)
    }

-- monad for managing compiler log and errors
type CompilerMonad a = ExceptT String (Writer [String]) a

-- unwrap compiler monad
runCompiler :: CompilerMonad a -> (Either String a, [String])
runCompiler = runWriter . runExceptT

-- convert output generated by the compiler to a string
showCompilerOutput :: (Show a) => CompilerMonad a -> String
showCompilerOutput c = case runCompiler c of
        (Right ts, l) -> show ts
        (Left e, l)   -> e

-- unwarp the compiler log and convert it to a string
showCompilerLog :: CompilerMonad a -> String
showCompilerLog c = case runCompiler c of (_, l) -> concat l

-- merge two compiler instances
mergeCompilers :: Monoid a => CompilerMonad a -> CompilerMonad a -> CompilerMonad a
mergeCompilers c1 c2 = merge (runCompiler c1) (runCompiler c2) where
    merge :: Monoid a => (Either String a, [String]) -> (Either String a, [String]) -> CompilerMonad a
    merge (r1,l1) (r2,l2) = writer ((), l1 ++ l2) >> mrets r1 r2
    mrets (Left e1) (Left e2) = compError (e1 ++ e2)
    mrets (Left e1) (Right _) = compError e1
    mrets (Right _) (Left e2) = compError e2
    mrets (Right v1) (Right v2) = return (mappend v1 v2)

-- generate a compilation error and log it
logMsg :: String -> CompilerMonad ()
logMsg s = writer ((), [s])

logMsgLn :: String -> CompilerMonad ()
logMsgLn s = logMsg (s ++ "\n")

-- generate a compilation error with the given message
logError :: String -> CompilerMonad a
logError s = do
    logMsgLn s
    throwError s

-- generate a compilation error with the given message
compError :: String -> CompilerMonad a
compError = throwError

-- catch a compilation error
catchCompError :: CompilerMonad a -> (String -> CompilerMonad a) -> CompilerMonad a
catchCompError = catchError

-- show location in source where compilation error occurred
showErrorLocationL :: String -> String -> Int -> Int -> String
showErrorLocationL lead source line column = concat
    [ lead, "| ", (lines source) !! (line - 1), "\n"    -- show the source line of code
    , lead, "| ", take (column - 1) $ repeat ' ', "^"   -- show cursor pointing to the error
    ]

showErrorLocationI :: Int -> String -> Int -> Int -> String
showErrorLocationI indent = showErrorLocationL (take indent $ repeat ' ')

showErrorLocation :: String -> Int -> Int -> String
showErrorLocation = showErrorLocationL ""
